{"version":3,"sources":["logo.svg","components/navbar/index.js","components/footer/index.js","pages/Homepage/index.js","pages/About/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","Navbar","bg","expand","Brand","to","Toggle","aria-controls","Collapse","id","Nav","className","Link","Footer","class","href","target","Component","Homepage","state","username","password","loggedIn","handleChange","bind","handleSubmit","e","name","value","this","setState","preventDefault","fetch","auth","json","forEach","val","pwd","alert","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Text","Button","variant","disabled","length","React","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.966d50d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Navbar,Nav} from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction NavigationBar()\r\n{\r\n    return (\r\n    <div>\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n  <Navbar.Brand><Link to=\"/testAppReact\">TestApp</Link></Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n    <Nav className=\"ml-auto\">\r\n    <LinkContainer to=\"/testAppReact\">\r\n              <Nav.Link>Home</Nav.Link>\r\n    </LinkContainer>\r\n    <LinkContainer to=\"/testAppReact/about\">\r\n        <Nav.Link>About</Nav.Link>\r\n    </LinkContainer>\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n</div>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;","import React, { Component } from 'react'\r\nimport '../footer/footer.css';\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"fixed-bottom text-center d-flex flex-column bg-dark text-white\">\r\n            <footer class=\"footer\">\r\n                <div class=\"footer-content\">\r\n                <a href=\"https://www.linkedin.com/in/fatalcoder524/\" target=\"_blank\">\r\n                \tfatalcoder524\r\n                </a><span>&copy; 2020</span>\r\n                </div>\r\n            </footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport NavigationBar from '../../components/navbar';\r\nimport Footer from '../../components/footer';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './homepage.css';\r\n\r\n\r\nclass Homepage extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username : '',\r\n      password:'',\r\n      loggedIn:false,\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n}\r\n\r\nasync handleSubmit(e) {\r\n    e.preventDefault();\r\n    let auth=await fetch('/api/test')\r\n    let name=await auth.json()\r\n    name.forEach((val)=>{\r\n      if(val.username==this.state.username && val.pwd==this.state.password)\r\n      {\r\n        this.setState({loggedIn:true})\r\n        return\r\n      }\r\n    })\r\n    if(this.state.loggedIn==true)\r\n    {\r\n      alert('Login Sucessfull')\r\n    }\r\n    else{\r\n      alert('Login Unsucessfull')\r\n    }\r\n    this.setState({username : '',password:''})\r\n}\r\n    render() {\r\n      const { username, password } = this.state;\r\n      return (\r\n        <div>\r\n          <NavigationBar/>\r\n          <div className=\"container\">\r\n          <div className=\"centering border border-primary\">\r\n          <div className=\"heading bg-primary p-2\">\r\n              <h3 className=\"text-center text-white font-weight-bolder\">Login</h3>\r\n            </div>\r\n          <div className=\"\">\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Group controlId=\"formbasicUser\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter Username\" name=\"username\"  value={username} onChange={this.handleChange}/>\r\n                <Form.Text className=\"text-muted\">\r\n                  Max 20 characters.\r\n                </Form.Text>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" value={password} onChange={this.handleChange}/>\r\n              </Form.Group>\r\n              <Button variant=\"primary w-100\" type=\"submit\" disabled={password.length==0 || username.length==0}>\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n          </div>\r\n          </div>\r\n          <Footer/>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\nimport NavigationBar from '../../components/navbar';\r\nimport Footer from '../../components/footer';\r\n\r\nexport default class About extends React.Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <NavigationBar/>\r\n          <h1>About</h1>\r\n          Username: 4EOA3dNx2R\r\n\r\nDatabase name: 4EOA3dNx2R\r\n\r\nPassword: milaXvmt4X\r\n\r\nServer: remotemysql.com\r\n\r\nPort: 3306\r\n          <Footer/>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Homepage from './pages/Homepage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport About from './pages/About';\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\nfunction App() {\n  return (\n    <Router>\n    <Route exact path='/testAppReact' component={Homepage}/>\n    <Route exact path='/testAppReact/about' component={About}/>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}